/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

/***************************** Include Files *******************************/

#include <stdio.h>
#include "xgpio.h"
#include "xparameters.h"
#include "led_axi_ip.h"
#include "uart_cntrl.h"

/***************************** Include Files *******************************/


/************************** Constant Definitions ***************************/

#define MY_UART_READ_REG UART_CNTRL_SLV_REG0_OFFSET
#define MY_UART_WRITE_REG UART_CNTRL_SLV_REG1_OFFSET

/************************** Constant Definitions ***************************/

void my_uart_transmit_msg(const char *str);
void my_uart_transmit_byte(const char toWrite);

void my_uart_receive(const char* readData);
void dip_2_led(XGpio* dip);

int main(){
	XGpio dip;
	XStatus status;

	// print("Hello World! \n\r");

	// GPIO init
	status = XGpio_Initialize(&dip, XPAR_AXI_GPIO_0_DEVICE_ID);
	if(status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	char readBuffer[1024] = "Buffer Init!";
	while(1) {
		dip_2_led(&dip);
		my_uart_transmit_msg("In while loop!");
		//my_uart_receive(readBuffer);
		//my_uart_transmit_msg(readBuffer);
	}

	return 0;
}

void my_uart_transmit_msg(const char *str) {
	// Let's begin by transmitting byte by byte
	const char* currChar = str;
	do {
		// Transmit byte here
		my_uart_transmit_byte(*currChar);
		currChar++;
	} while(*currChar != '\0');
}

void my_uart_transmit_byte(const char toWrite) {
	// 1. Put data into the specified place in the slave register
	Xuint32 tmpData = UART_CNTRL_mReadSlaveReg0(XPAR_UART_CNTRL_0_BASEADDR, UART_CNTRL_SLV_REG0_OFFSET);
	tmpData &= 0xFF00FFFF;
	tmpData |= toWrite<<16;

	// 2. Put Write Start high and write to UART Controller
	tmpData |= 0x01;
	UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, UART_CNTRL_SLV_REG0_OFFSET, tmpData);

	// 3. Wait until Write Done is set -> then lower the flag
	Xuint32 tmpWD;
	while(1) {
		tmpData = UART_CNTRL_mReadSlaveReg0(XPAR_UART_CNTRL_0_BASEADDR, UART_CNTRL_SLV_REG0_OFFSET);

		tmpWD = tmpData &  0x02;
		if(tmpWD == 0x02) {
			// 4. Lower Write Done! Our data has been transmitted!
			tmpData ^= 0x02;
			UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, UART_CNTRL_SLV_REG0_OFFSET, tmpData);
			break;
		}
	}
}

void dip_2_led(XGpio* dip) {
	XGpio_SetDataDirection(dip, 1, 0xFF);		// Input
	int dip_state = XGpio_DiscreteRead(dip, 1);
	LED_AXI_IP_mWriteReg(XPAR_LED_AXI_IP_0_BASEADDR, 0, dip_state);
}


/***************************************************************************/
/***************************** Leftover Code *******************************/
/***************************************************************************/
int main_former()
{
    init_platform();

    print("Hello World\n\r");

    return 0;
}
